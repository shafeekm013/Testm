# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
# My Demo CI-CD
# Added MS team Integration as well
# Follow the below link and check under 'Concept' tab to familiar with all these defined steps & variables such as pool, script, tasks, artifcat and so on.
# https://docs.microsoft.com/en-us/azure/devops/pipelines/ 

## Define the branch info for CI
trigger:
- master

## Define the agent pool server whether it is MS / Self hosted
pool:
  vmImage: 'Ubuntu-16.04'

# Define the build number which consists of pipeline name, buildID and git commit SHA
# build_pipeline_name is a custom variable which can set it under the Azure DevOps build definition. 
variables:
  build_number: $(build_pipeline_name).$(Build.BuildID).$(Build.SourceVersion)

# Define the CI process here as steps
steps:

# Install dependencies in the agent pool server to make the system ready for build generation process
- script: |
    sudo apt-get update
    sudo apt-get install build-essential
    sudo apt-get install libboost-all-dev
  displayName: 'Install the dependency packages'

# Generate the build output named as 'binary.out' as part of CI
- script: |
    g++ -std=c++11 -I/usr/include/boost/asio -I/usr/include/boost -o binary.out main.cpp connection.cpp connection_manager.cpp mime_types.cpp reply.cpp request_handler.cpp request_parser.cpp server.cpp -lboost_system -lboost_thread -lpthread
  displayName: 'Start compiling for the binary'

# Update the build information under a readme.txt file
- script: |
    echo $(build_number) > readme.txt
  displayName: 'Update the build number in readme.txt'

# Copy the build output and relevant files to Artifact directory
- task: CopyFiles@2
  inputs:
    contents: |
        binary.out
        readme.txt
        Dockerfile
    targetFolder: $(Build.ArtifactStagingDirectory)

# Finally, publish those files to the artifact named as "RWO_Artifacts"
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: $(Build.ArtifactStagingDirectory)
    artifactName: RWO_Artifacts